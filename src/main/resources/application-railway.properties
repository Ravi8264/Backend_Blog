# Railway Safe Configuration
spring.application.name=blog

# IMPORTANT: Use hardcoded port to avoid Railway PORT issues
# The main() method will override this if PORT is valid
server.port=8080

# Active Profile
spring.profiles.active=${SPRING_PROFILES_ACTIVE:prod}

# Database Configuration - Railway will provide DATABASE_URL
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/Blog}
spring.datasource.username=${DATABASE_USERNAME:postgres}
spring.datasource.password=${DATABASE_PASSWORD:ravi}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# JPA Configuration for Railway
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# File Upload Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
file.upload.path=${FILE_UPLOAD_PATH:./uploads/images/}

# Security Configuration
spring.security.user.name=${ADMIN_USERNAME:ravi}
spring.security.user.password=${ADMIN_PASSWORD:ravi123}

# Swagger Configuration
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true

# Logging Configuration for Railway
logging.level.org.springframework.security=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.com.blog.blog=INFO
logging.level.root=WARN

# CORS Configuration for Railway
cors.allowed.origins=${CORS_ORIGINS:*}

# Railway Health Check
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always
