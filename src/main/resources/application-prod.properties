# Production Configuration for Railway/Render
spring.application.name=blog

# Database Configuration (Railway/Render will provide these via environment variables)
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/Blog}
spring.datasource.username=${DATABASE_USERNAME:postgres}
spring.datasource.password=${DATABASE_PASSWORD:password}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Hibernate Configuration for Production
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# Server Configuration
# Use PORT environment variable from deployment platform, fallback to 8080
server.port=${PORT:8080}
server.servlet.context-path=/

# File Upload Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
file.upload.path=${FILE_UPLOAD_PATH:./uploads/images/}

# Security Configuration
spring.security.user.name=${ADMIN_USERNAME:admin}
spring.security.user.password=${ADMIN_PASSWORD:admin123}

# Swagger/OpenAPI Configuration (Enable for production if needed)
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true

# Logging Configuration
logging.level.org.springframework.security=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# CORS Configuration
cors.allowed.origins=${CORS_ORIGINS:http://localhost:3000,https://yourdomain.com}
